package com.ttolley.coup.repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Component;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.ttolley.coup.model.Action;
import com.ttolley.coup.model.GameConfig;
import com.ttolley.coup.model.GameResult;
import com.ttolley.coup.model.PlayerInfo;
import com.ttolley.coup.model.TestResult;
import com.ttolley.coup.model.TestRun;

// TODO
@Component
public class GameHistoryManager {

	private final JdbcTemplate template;

	@Autowired
	public GameHistoryManager(JdbcTemplate template) {
		this.template = template;
		initializeDb();
	}

	private void initializeDb() {
		template.update(
				"CREATE TABLE IF NOT EXISTS test_run(id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(64))");
		
		template.update(
				"CREATE TABLE IF NOT EXISTS test_player (id INT AUTO_INCREMENT PRIMARY KEY, test_id INT, player_id INT, player_type VARCHAR(64))");
		
		template.update(
				"CREATE TABLE IF NOT EXISTS game(id INT AUTO_INCREMENT PRIMARY KEY, test_id INT, player_count INT, winner INT)");

		template.update("CREATE TABLE IF NOT EXISTS events(id INT AUTO_INCREMENT PRIMARY KEY, " + "game_id INT NOT NULL, "
				+ "player_id INT NOT NULL, " + "target_id INT, " + "action VARCHAR(32) NOT NULL, "
				+ "role VARCHAR(16))");
	}

	public int initializeTest(GameConfig config) {
		int testId = runQueryAndReturnAutoGeneratedKey("INSERT INTO test_run (name) VALUES (?)", (ps) -> ps.setString(1, config.testLabel));
		int i = 0;
		for (String type : config.playerTypes) {
			template.update("INSERT INTO test_player (test_id, player_id, player_type) VALUES (?,?,?)", testId, i++, type);
		}
		config.testId = testId;
		return testId;
	}
	
	public int initializeGame(GameConfig config) {
		String sql = "INSERT INTO game (player_count, test_id) VALUES (?, ?)";
		return runQueryAndReturnAutoGeneratedKey(sql, (ps) -> {
			ps.setInt(1, config.playerTypes.size());
			ps.setInt(2, config.testId);
		});
	}

	private int runQueryAndReturnAutoGeneratedKey(String sql, ThrowingSQLConsumer<PreparedStatement> paramSetter) {
		KeyHolder holder = new GeneratedKeyHolder();
		template.update(new PreparedStatementCreator() {
			@Override
			public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
				PreparedStatement ps = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
				paramSetter.accept(ps);
				return ps;
			}
		}, holder);

		return holder.getKey().intValue();
	}
	
	public void updateWinner(int gameId, PlayerInfo winner) {
		template.update("UPDATE game SET winner = ? WHERE id = ?", winner.playerId, gameId);
	}

	public TestResult getTestResults(int testId) {
		String testLabel = template.queryForObject("SELECT name FROM test_run WHERE id = ?", new Object[] {testId}, String.class);
		
		List<String> playerTypes = template.query("SELECT player_type FROM test_player WHERE test_id = ?", new Object[] { testId }, (rs) -> {
			List<String> list = Lists.newArrayList();
			while(rs.next()) {
				list.add(rs.getString(1));
			}
			return list;
		});
		
		List<GameResult> results = template.query("SELECT winner FROM game WHERE test_id = ?", new Object[] { testId }, (rs) -> {
			List<GameResult> list = Lists.newArrayList();
			while(rs.next()) {
				List<PlayerInfo> infos = Lists.newArrayList();
				int winner = rs.getInt(1);
				for (int i = 0; i < playerTypes.size(); i++) {
					infos.add(new PlayerInfo(playerTypes.get(i), i, i != winner));
				}
				list.add(new GameResult(infos));
			}
			
			return list;
		});
		
		
		return new TestResult(testId, testLabel, results);
	}
	
	public List<TestRun> getTestRuns(int limit, int offset) {
		return template.query("SELECT id, name FROM test_run LIMIT " + limit + " OFFSET " + offset, rs -> {
			List<TestRun> list = Lists.newArrayList();
			while(rs.next()) {
				list.add(new TestRun(rs.getInt(1), rs.getString(2)));
			}
			
			return list;
		});
	}
	
	public Map<String, Integer> getGameStats() {
		return template.query("SELECT tp.player_type, COUNT(1) FROM game g JOIN test_player tp ON g.test_id = tp.test_id AND g.winner = tp.player_id GROUP BY tp.player_type", rs -> {
			Map<String, Integer> totals = Maps.newHashMap();
			while(rs.next()) {
				String type = rs.getString(1);
				if (type != null) {
				    totals.put(type, rs.getInt(2));
				}
			}
			return totals;
		});
	}

	public void registerEvent(int gameId, Action action) {
		template.update("INSERT INTO events (game_id, player_id, target_id, action, role) VALUES (?, ?, ?, ?, ?)",
				gameId, action.sourcePlayerId, action.targetPlayerId, action.type.name(),
				action.type.requiredRole == null ? null : action.type.requiredRole.name());
	}
	
	@FunctionalInterface
    private interface ThrowingSQLConsumer<T> {
    	void accept(T value) throws SQLException;
    }
}
